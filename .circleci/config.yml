version: 2.1

orbs:
  node: circleci/node@5.0.2

jobs:
  deploy-to-env:
    parameters:
      target_env:
        type: string
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout

      # Install NPM
      - run:
          name: Install NPM latest
          command: |
            npm install latest
            export PATH=$(pwd)/node_modules/.bin:$PATH


      # Install Salesforce CLI
      - run:
          name: Install Salesforce CLI
          command: npm install @salesforce/cli --global

      # Ensure SF CLI is updated
      - run:
          name: Update Salesforce CLI
          command: npm update --global @salesforce/cli

      # Prepare JWT key
      - run:
          name: Prepare JWT key
          command: |
            echo "$JWT_KEY_B64" | base64 -d > server.key
            chmod 600 server.key
            openssl rsa -in server.key -check -noout

      # JWT Auth (old logic retained)
      - run:
          name: JWT Auth
          command: |
            source "$BASH_ENV"
            sf org login jwt \
              --username "${SF_USERNAME_<< parameters.target_env >>}" \
              --jwt-key-file server.key \
              --client-id "${SF_CONSUMER_KEY_<< parameters.target_env >>}" \
              --instance-url "${SF_INSTANCEURL_<< parameters.target_env >>}" \
              --alias targetOrg \
              --set-default

      # Find the Most Recent Tag for the given env
      - run:
          name: Find Most Recent Tag
          command: |
            prefix="INT${CIRCLE_JOB^^}-${CIRCLE_BRANCH^^}"
            # Default per env (QA/UAT/PROD)
            if [ "<< parameters.target_env >>" = "QA" ]; then
              prefix="INTQA"
            elif [ "<< parameters.target_env >>" = "UAT" ]; then
              prefix="INTUAT"
            elif [ "<< parameters.target_env >>" = "PROD" ]; then
              prefix="INTPROD"
            fi

            currentRef=0
            for tag in $(git describe --tags --match="${prefix}-[0-9]*"); do
              refNum=$(echo $tag | cut -d '-' -f 2)
              if test $refNum -gt $currentRef; then
                  currentRef=$refNum
                  currentTag=$tag
              fi
            done

            echo "TAG_PREFIX=$prefix" >> $BASH_ENV
            echo "CURRENT_REF=$currentRef" >> $BASH_ENV
            source $BASH_ENV
            echo "Latest tag for $prefix: $currentTag ($currentRef)"

      # Build the Package Manifest
      - run:
          name: Build the Package Manifest
          command: |
            source $BASH_ENV
            cd Bedrock/Bedrock
            oldIFS="$IFS"
            IFS=$'\n'
            FILES=$(git diff --name-only ${TAG_PREFIX}-${CURRENT_REF} HEAD | cut -b 9-)
            if test -n "$FILES"; then
                sf project generate manifest -p $FILES
            else 
                echo "There are no new commits to deploy to ${TAG_PREFIX}."
                exit 1
            fi

      # Deploy using package.xml
      - run:
          name: Push source
          command: |
            if test -f package.xml; then
              sf project deploy start -w 360 -x package.xml -l RunLocalTests -o targetOrg 
            else 
              echo "No Package Found!"
              exit 1
            fi
            IFS=$oldIFS

      # Set New Tag after successful deploy
      - run:
          name: Set New Tag
          command: |
            source $BASH_ENV
            newTag="${TAG_PREFIX}-$(( CURRENT_REF + 1 ))"
            git tag "$newTag"
            echo "Created new tag: $newTag"

workflows:
  deploy-qa:
    jobs:
      - deploy-to-env:
          name: Deploy to QA
          target_env: "QA"
          filters:
            branches:
              only: qa

  deploy-uat:
    jobs:
      - deploy-to-env:
          name: Deploy to UAT
          target_env: "UAT"
          filters:
            branches:
              only: uat

  deploy-prod:
    jobs:
      - deploy-to-env:
          name: Deploy to Prod
          target_env: "PROD"
          filters:
            branches:
              only: main
